#ani.options(interval = 0.2)
gganimate(confirmed_cases)
?gganimate
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80") + theme_map()
confirmed_cases <- world_map +
geom_point(data = ncov_country_stats, aes(x = X, y = Y, size = Confirmed, colour = "red", alpha = 0.7,
frame = Date, cumulative = TRUE)) + labs(size = "Confirmed cases") +
transition_time(day) + ease_aes('linear')
confirmed_cases
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80") + theme_map()
confirmed_cases <- world_map +
geom_point(data = ncov_country_stats, aes(x = X, y = Y, size = Confirmed, colour = "red", alpha = 0.7,
frame = Date, cumulative = TRUE)) + labs(size = "Confirmed cases") +
transition_time(Date) + ease_aes('linear')
confirmed_cases
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80") + theme_map()
confirmed_cases <- world_map + ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>%
geom_point(data = ncov_country_stats, aes(x = X, y = Y, size = Confirmed, colour = "red", alpha = 0.7,
frame = Date, cumulative = TRUE)) + labs(size = "Confirmed cases") +
transition_time(Date) + ease_aes('linear')
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80") + theme_map()
confirmed_cases <- world_map + ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>%
geom_point(data = ncov_country_stats, aes(x = X, y = Y, size = Confirmed, colour = "red", alpha = 0.7,
cumulative = TRUE)) + labs(size = "Confirmed cases") +
transition_time(Date) + ease_aes('linear')
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80") + theme_map()
confirmed_cases <- world_map + ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>%
geom_point(aes(x = X, y = Y, size = Confirmed, colour = "red", alpha = 0.7,
cumulative = TRUE)) + labs(size = "Confirmed cases") +
transition_time(Date) + ease_aes('linear')
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80") + theme_map()
confirmed_cases <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>%
geom_point(aes(x = X, y = Y, size = Confirmed, colour = "red", alpha = 0.7,
cumulative = TRUE)) + labs(size = "Confirmed cases") +
transition_time(Date) + ease_aes('linear')
?ggplot()
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80") + theme_map()
confirmed_cases <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>%
geom_point(mapping = aes(x = X, y = Y, size = Confirmed, colour = "red", alpha = 0.7,
cumulative = TRUE)) + labs(size = "Confirmed cases") +
transition_time(Date) + ease_aes('linear')
world_map <- ggplot() + borders("world", color = "black", fill = "grey80") + theme_map()
confirmed_cases <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>%
geom_point(mapping = aes(x = X, y = Y, size = Confirmed, colour = "red", alpha = 0.7,
cumulative = TRUE)) + labs(size = "Confirmed cases") +
transition_time(Date) + ease_aes('linear')
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80") + theme_map()
confirmed_cases <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>% ggplot() %>%
geom_point(aes(x = X, y = Y, size = Confirmed, colour = "red", alpha = 0.7,
cumulative = TRUE)) + labs(size = "Confirmed cases") +
transition_time(Date) + ease_aes('linear')
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80") + theme_map()
confirmed_cases <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>% ggplot() +
geom_point(aes(x = X, y = Y, size = Confirmed, colour = "red", alpha = 0.7,
cumulative = TRUE)) + labs(size = "Confirmed cases") +
transition_time(Date) + ease_aes('linear')
confirmed_cases + world_map
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80") + theme_map()
confirmed_cases <- world_map + ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>% ggplot() +
geom_point(aes(x = X, y = Y, size = Confirmed, colour = "red", alpha = 0.7,
cumulative = TRUE)) + labs(size = "Confirmed cases") +
transition_time(Date) + ease_aes('linear')
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80") + theme_map()
less_countries <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy")
confirmed_cases <- world_map + ggplot() +
geom_point(data = less_countries, aes(x = X, y = Y, size = Confirmed, colour = "red", alpha = 0.7,
cumulative = TRUE)) + labs(size = "Confirmed cases") +
transition_time(Date) + ease_aes('linear')
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80") + theme_map()
less_countries <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy")
confirmed_cases <- world_map +
geom_point(data = less_countries, aes(x = X, y = Y, size = Confirmed, colour = "red", alpha = 0.7,
cumulative = TRUE)) + labs(size = "Confirmed cases") +
transition_time(Date) + ease_aes('linear')
confirmed_cases
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80") + theme_map()
less_countries <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy")
confirmed_cases <- world_map +
geom_point(data = less_countries, aes(x = X, y = Y, size = Confirmed, colour = "red", alpha = 0.7,
cumulative = TRUE)) + labs(size = "Confirmed cases") +
transition_time(Date) + ease_aes('linear')
confirmed_cases
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80") + theme_map()
less_countries <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy")
confirmed_cases <- world_map +
geom_point(data = less_countries, aes(x = X, y = Y, size = Confirmed, colour = "red", alpha = 0.7,
cumulative = TRUE)) + labs(size = "Confirmed cases") +
transition_time(Date) + ease_aes('linear')
confirmed_cases
anim_save()
anim_save("covidanim.gif")
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80")
less_countries <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>% select(-c(geometry))
confirmed_cases <- world_map +
geom_point(data = less_countries, aes(x = X, y = Y, size = Confirmed, colour = "red", alpha = 0.7,
cumulative = TRUE)) + labs(size = "Confirmed cases") +
transition_time(Date) + ease_aes('linear') + labs(title = "Date: {frame_time}") + coord_fixed()
confirmed_cases
anim_save("covidanim.gif")
#head(ncov_country_stats)
head(ncov_country_stats)
# Load the corona virus data
load(paste0("ncov-",today()-days(1),".Rdata"))
# Load data used in the shiny app (including the figures and geoms)
country_shp <- st_read("./GlobalSHP/UIA_World_Countries_Boundaries.shp")
# remove columns that aren't needed
country_shp <- country_shp[-c(1,3,4,5)]
country_shp <- country_shp %>% rename(Country = COUNTRY)
country_shp <- country_shp %>% st_transform(crs = 4326)
country_shp <- country_shp %>% st_centroid()
# These countries had no date on 2020-03-24 and hence aren't drawn on the map; this is fixed by created values of "0"
# for each variable for each of these countries
countries_data_NA <- c("Mali", "Yemen", "Sierra Leone", "Guinea-Bissau", "South Sudan",
"Burma", "Laos", "Turkmenistan", "Tajikistan")
# Change the name of some of the countries to allow for better matching
country_shp$Country <- as.character(country_shp$Country)
country_shp$Country[155] <- "US"
country_shp$Country[72] <- "Cote d'Ivoire"
country_shp$Country[247] <- "Russia"
country_shp$Country[100] <- "Congo (Kinshasa)"
country_shp$Country[101] <- "Congo (Brazzaville)"
country_shp$Country[238] <- "Korea, South"
country_shp$Country[240] <- "Korea, North"
ncov$Country <- as.character(ncov$Country)
ncov_country_stats <- st_as_sf(left_join(ncov,country_shp, by = "Country"))
# Code to add X and Y coordinates of the country centroids to the map; trying the Lat and Long integers in the
# dataframe in the meantime...
#new_geometry <- st_coordinates(ncov_country_stats$geometry)
#dim(as.matrix(new_geometry))
#ncov_country_stats <- cbind(ncov_country_stats, new_geometry)
head(ncov_country_stats)
# Calculate daily rate of new infections - this will be represented by colours of the circles
ncov_country_stats <- ncov_country_stats %>% mutate(DailyGrowth = Confirmed + 1)
for (i in 2:dim(ncov_country_stats)[1]){
ncov_country_stats$Confirmed[i] = log(ncov_country_stats$Confirmed[i]/ncov_country_stats$Confirmed[i-1])
}
ncov_country_stats <- ncov_country_stats %>% filter(Date == "2020-01-22") %>%
select(-c(Province.State, Recovered, Deaths, Country.Region, Shape__Are, Shape__Len, geometry))
head(ncov_country_stats)
# Load the corona virus data
load(paste0("ncov-",today()-days(1),".Rdata"))
# Load data used in the shiny app (including the figures and geoms)
country_shp <- st_read("./GlobalSHP/UIA_World_Countries_Boundaries.shp")
# remove columns that aren't needed
country_shp <- country_shp[-c(1,3,4,5)]
country_shp <- country_shp %>% rename(Country = COUNTRY)
country_shp <- country_shp %>% st_transform(crs = 4326)
country_shp <- country_shp %>% st_centroid()
# These countries had no date on 2020-03-24 and hence aren't drawn on the map; this is fixed by created values of "0"
# for each variable for each of these countries
countries_data_NA <- c("Mali", "Yemen", "Sierra Leone", "Guinea-Bissau", "South Sudan",
"Burma", "Laos", "Turkmenistan", "Tajikistan")
# Change the name of some of the countries to allow for better matching
country_shp$Country <- as.character(country_shp$Country)
country_shp$Country[155] <- "US"
country_shp$Country[72] <- "Cote d'Ivoire"
country_shp$Country[247] <- "Russia"
country_shp$Country[100] <- "Congo (Kinshasa)"
country_shp$Country[101] <- "Congo (Brazzaville)"
country_shp$Country[238] <- "Korea, South"
country_shp$Country[240] <- "Korea, North"
ncov$Country <- as.character(ncov$Country)
ncov_country_stats <- st_as_sf(left_join(ncov,country_shp, by = "Country"))
# Code to add X and Y coordinates of the country centroids to the map; trying the Lat and Long integers in the
# dataframe in the meantime...
#new_geometry <- st_coordinates(ncov_country_stats$geometry)
#dim(as.matrix(new_geometry))
#ncov_country_stats <- cbind(ncov_country_stats, new_geometry)
# Calculate daily rate of new infections - this will be represented by colours of the circles
ncov_country_stats <- ncov_country_stats %>% mutate(DailyGrowth = Confirmed + 1)
for (i in 2:dim(ncov_country_stats)[1]){
ncov_country_stats$Confirmed[i] = log(ncov_country_stats$Confirmed[i]/ncov_country_stats$Confirmed[i-1])
}
ncov_country_stats <- ncov_country_stats %>% filter(Date != "2020-01-22") %>%
select(-c(Province.State, Recovered, Deaths, Country.Region, Shape__Are, Shape__Len, geometry))
head(ncov_country_stats)
# Load the corona virus data
load(paste0("ncov-",today()-days(1),".Rdata"))
# Load data used in the shiny app (including the figures and geoms)
country_shp <- st_read("./GlobalSHP/UIA_World_Countries_Boundaries.shp")
# remove columns that aren't needed
country_shp <- country_shp[-c(1,3,4,5)]
country_shp <- country_shp %>% rename(Country = COUNTRY)
country_shp <- country_shp %>% st_transform(crs = 4326)
country_shp <- country_shp %>% st_centroid()
# These countries had no date on 2020-03-24 and hence aren't drawn on the map; this is fixed by created values of "0"
# for each variable for each of these countries
countries_data_NA <- c("Mali", "Yemen", "Sierra Leone", "Guinea-Bissau", "South Sudan",
"Burma", "Laos", "Turkmenistan", "Tajikistan")
# Change the name of some of the countries to allow for better matching
country_shp$Country <- as.character(country_shp$Country)
country_shp$Country[155] <- "US"
country_shp$Country[72] <- "Cote d'Ivoire"
country_shp$Country[247] <- "Russia"
country_shp$Country[100] <- "Congo (Kinshasa)"
country_shp$Country[101] <- "Congo (Brazzaville)"
country_shp$Country[238] <- "Korea, South"
country_shp$Country[240] <- "Korea, North"
ncov$Country <- as.character(ncov$Country)
ncov_country_stats <- st_as_sf(left_join(ncov,country_shp, by = "Country"))
# Code to add X and Y coordinates of the country centroids to the map; trying the Lat and Long integers in the
# dataframe in the meantime...
#new_geometry <- st_coordinates(ncov_country_stats$geometry)
#dim(as.matrix(new_geometry))
#ncov_country_stats <- cbind(ncov_country_stats, new_geometry)
# Calculate daily rate of new infections - this will be represented by colours of the circles
ncov_country_stats <- ncov_country_stats %>% mutate(DailyGrowth = Confirmed + 1)
for (i in 2:dim(ncov_country_stats)[1]){
ncov_country_stats$DailyGrowth[i] = log(ncov_country_stats$DailyGrowth[i]/ncov_country_stats$DailyGrowth[i-1])
}
ncov_country_stats <- ncov_country_stats %>% filter(Date != "2020-01-22") %>%
select(-c(Province.State, Recovered, Deaths, Country.Region, Shape__Are, Shape__Len, geometry))
head(ncov_country_stats)
# Load the corona virus data
load(paste0("ncov-",today()-days(1),".Rdata"))
# Load data used in the shiny app (including the figures and geoms)
country_shp <- st_read("./GlobalSHP/UIA_World_Countries_Boundaries.shp")
# remove columns that aren't needed
country_shp <- country_shp[-c(1,3,4,5)]
country_shp <- country_shp %>% rename(Country = COUNTRY)
country_shp <- country_shp %>% st_transform(crs = 4326)
country_shp <- country_shp %>% st_centroid()
# These countries had no date on 2020-03-24 and hence aren't drawn on the map; this is fixed by created values of "0"
# for each variable for each of these countries
countries_data_NA <- c("Mali", "Yemen", "Sierra Leone", "Guinea-Bissau", "South Sudan",
"Burma", "Laos", "Turkmenistan", "Tajikistan")
# Change the name of some of the countries to allow for better matching
country_shp$Country <- as.character(country_shp$Country)
country_shp$Country[155] <- "US"
country_shp$Country[72] <- "Cote d'Ivoire"
country_shp$Country[247] <- "Russia"
country_shp$Country[100] <- "Congo (Kinshasa)"
country_shp$Country[101] <- "Congo (Brazzaville)"
country_shp$Country[238] <- "Korea, South"
country_shp$Country[240] <- "Korea, North"
ncov$Country <- as.character(ncov$Country)
ncov_country_stats <- st_as_sf(left_join(ncov,country_shp, by = "Country"))
# Code to add X and Y coordinates of the country centroids to the map; trying the Lat and Long integers in the
# dataframe in the meantime...
#new_geometry <- st_coordinates(ncov_country_stats$geometry)
#dim(as.matrix(new_geometry))
#ncov_country_stats <- cbind(ncov_country_stats, new_geometry)
# Calculate daily rate of new infections - this will be represented by colours of the circles
ncov_country_stats <- ncov_country_stats %>% mutate(temp = Confirmed + 1)
for (i in 2:dim(ncov_country_stats)[1]){
ncov_country_stats$DailyGrowth[i] = log(ncov_country_stats$temp[i]/ncov_country_stats$temp[i-1])
}
ncov_country_stats <- ncov_country_stats %>% filter(Date != "2020-01-22") %>%
select(-c(Province.State, Recovered, Deaths, Country.Region, Shape__Are, Shape__Len, temp))
head(ncov_country_stats)
view(ncov_country_stats$DailyGrowth)
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80")
less_countries <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>% select(-c(geometry))
confirmed_cases <- world_map +
geom_point(data = less_countries, aes(x = Long, y = Lat, size = Confirmed, colour = DailyGrowth), alpha = 0.7,
cumulative = TRUE) + labs(size = "Confirmed cases") +
transition_time(Date) + ease_aes('linear') + labs(title = "Date: {frame_time}") + coord_fixed()
confirmed_cases
anim_save("covidanim.gif")
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80")
less_countries <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>% select(-c(geometry))
confirmed_cases <- world_map +
geom_point(data = less_countries, aes(x = Long, y = Lat, size = Confirmed, colour = DailyGrowth), alpha = 0.4) +
labs(size = "Confirmed cases") + scale_fill_gradient(low = "#FF751A", high = "#CC0000")
transition_time(Date) + ease_aes('linear') + labs(title = "Date: {frame_time}") + coord_fixed()
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80")
less_countries <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>% select(-c(geometry))
confirmed_cases <- world_map +
geom_point(data = less_countries, aes(x = Long, y = Lat, size = Confirmed, colour = DailyGrowth), alpha = 0.4) +
labs(size = "Confirmed cases") + scale_fill_gradient(low = "#FF751A", high = "#CC0000") +
transition_time(Date) + ease_aes('linear') + labs(title = "Date: {frame_time}") + coord_fixed()
confirmed_cases
anim_save("covidanim.gif")
?scale_fill_gradient
?ease_aes
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80")
less_countries <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>% select(-c(geometry))
confirmed_cases <- world_map +
geom_point(data = less_countries, aes(x = Long, y = Lat, size = Confirmed, fill = DailyGrowth), alpha = 0.4) +
labs(size = "Confirmed cases") + scale_fill_gradient(low = "#FF751A", high = "#CC0000") +
transition_time(Date) + ease_aes('elastic') + labs(title = "Date: {frame_time}") + coord_fixed()
confirmed_cases
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80")
less_countries <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>% select(-c(geometry))
confirmed_cases <- world_map +
geom_point(data = less_countries, aes(x = Long, y = Lat, size = Confirmed, fill = DailyGrowth), alpha = 0.4) +
labs(size = "Confirmed cases") + scale_fill_gradient(low = "#FF751A", high = "#CC0000") +
transition_time(Date) + ease_aes('linear') + labs(title = "Date: {frame_time}") + coord_fixed()
confirmed_cases
anim_save("covidanim.gif")
?scale_fill_gradient
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot() + borders("world", color = "black", fill = "grey80")
less_countries <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>% select(-c(geometry))
confirmed_cases <- world_map +
geom_point(data = less_countries, aes(x = Long, y = Lat, size = Confirmed, color = DailyGrowth), alpha = 0.4) +
labs(size = "Confirmed cases") + scale_fill_gradient(low = "#FF751A", high = "#CC0000", aesthetics = "color") +
transition_time(Date) + ease_aes('linear') + labs(title = "Date: {frame_time}") + coord_fixed()
confirmed_cases
anim_save("covidanim.gif")
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot(width = 8, height = 6) + borders("world", color = "black", fill = "grey80")
less_countries <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>% select(-c(geometry))
confirmed_cases <- world_map +
geom_point(data = less_countries, aes(x = Long, y = Lat, size = Confirmed, color = DailyGrowth), alpha = 0.4) +
labs(size = "Confirmed cases") + scale_fill_gradient(low = "#FF751A", high = "#CC0000", aesthetics = "color") +
transition_time(Date) + ease_aes('linear') + labs(title = "Date: {frame_time}") + coord_fixed()
confirmed_cases
anim_save("covidanim.gif")
# This portion of code references code from: "How to plot animated maps with gganimate" sourced from:
# https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate
world_map <- ggplot(width = 8, height = 6) + borders("world", color = "black", fill = "grey80")
less_countries <- ncov_country_stats %>% filter(Country == "China" | Country == "Italy") %>% select(-c(geometry))
confirmed_cases <- world_map +
geom_point(data = less_countries, aes(x = Long, y = Lat, size = Confirmed, color = DailyGrowth), alpha = 0.4) +
labs(size = "Confirmed cases") + scale_fill_gradient(low = "#FF751A", high = "#CC0000", aesthetics = "color") +
transition_time(Date) + ease_aes('linear') + labs(title = "Date: {frame_time}") #+ coord_fixed()
confirmed_cases
anim_save("covidanim.gif")
library(shiny); runApp('C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Assignments/Assignment 4/COVID-Tracker/app_v3.R')
runApp('C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Maps/Maps/map_app_v6.R')
library(shiny); runApp('C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Assignments/Assignment 4/COVID-Tracker/app_v3.R')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(root.dir = "C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Assignments/Assignment 4/")
library(sf)
library(gganimate)
library(tidyverse)
library(ggplot2)
library(plotly)
library(lubridate)
library(ggthemes)
library(maps)
# Load the corona virus data
load(paste0("ncov-",today()-days(1),".Rdata"))
#Remove the region level data from the file as this is unneccessary for the this animation
ncov <- ncov %>% mutate(Date = ymd(Date))
ncov <- ncov %>% group_by(Country.Region, Date) %>%
summarize(Confirmed = sum(Confirmed, na.rm = TRUE),
Deaths = sum(Deaths, na.rm  = TRUE),
Recovered = sum(Recovered, na.rm = TRUE))
ncov <- ncov %>% rename(Country = Country.Region)
# Load data used in the shiny app (including the figures and geoms)
country_shp <- st_read("./GlobalSHP/UIA_World_Countries_Boundaries.shp")
# remove columns that aren't needed
country_shp <- country_shp[-c(1,3,4,5)]
country_shp <- country_shp %>% rename(Country = COUNTRY)
country_shp <- country_shp %>% st_transform(crs = 4326)
country_shp <- country_shp %>% st_centroid()
# These countries had no date on 2020-03-24 and hence aren't drawn on the map; this is fixed by created values of "0"
# for each variable for each of these countries
countries_data_NA <- c("Mali", "Yemen", "Sierra Leone", "Guinea-Bissau", "South Sudan",
"Burma", "Laos", "Turkmenistan", "Tajikistan")
# Change the name of some of the countries to allow for better matching
country_shp$Country <- as.character(country_shp$Country)
country_shp$Country[155] <- "US"
country_shp$Country[72] <- "Cote d'Ivoire"
country_shp$Country[247] <- "Russia"
country_shp$Country[100] <- "Congo (Kinshasa)"
country_shp$Country[101] <- "Congo (Brazzaville)"
country_shp$Country[238] <- "Korea, South"
country_shp$Country[240] <- "Korea, North"
ncov$Country <- as.character(ncov$Country)
ncov_country_stats <- st_as_sf(left_join(ncov,country_shp, by = "Country"))
# Code to add X and Y coordinates of the country centroids to the map; trying the Lat and Long integers in the
# dataframe in the meantime...
new_geometry <- st_coordinates(ncov_country_stats$geometry)
#dim(as.matrix(new_geometry))
ncov_country_stats <- cbind(ncov_country_stats, new_geometry)
#view(ncov_country_stats$DailyGrowth)
# This portion of code will draw a graph of infections in the top 10 countries globally; the top 10 will be picked
# based on which countries are in the top 10 at the time of rendering -> find the top 10 countries
top10 <- ncov %>% filter(Date == (today()-days(2))) %>% arrange(desc(Confirmed))
top10 <- top10[1:10,]
#view(top10)
graph_countries <- ncov %>% filter(Country %in% top10$Country) %>% select(-c(Recovered, Deaths))
#view(graph_countries %>% filter(Confirmed > 0, Date < "2020-02-10"))
# Calculate the number of periods each country is in the data set for; US is just used as reference
time_units <- dim(graph_countries %>% filter(Country == "US"))[1]
# Cycle through each country and check when the first case occurs and from that point, create a timeline
#that starts at day 1 in terms of infections for the country
indexed_timeline <- numeric()
for (n in 0:9){
country_tl <- numeric()
for (i in 2:time_units){
if (graph_countries$Confirmed[(n*time_units)+1] > 0){
country_tl <- c(seq(1:(time_units)))
indexed_timeline <- c(indexed_timeline, country_tl)
break
}
else if(graph_countries$Confirmed[(i-1)+(n*time_units)] == 0 &
graph_countries$Confirmed[i+(n*time_units)] > 0){
# Create a sequence for 1 to "rest of days in the data set" and plonk it in there
country_tl <- c(rep(0,(i-1)), seq(1:(time_units+1-i)))
indexed_timeline <- c(indexed_timeline, country_tl)
break
}
}
}
indexed_timeline <- data.frame(matrix(indexed_timeline, ncol = 1))
graph_countries <- bind_cols(graph_countries, indexed_timeline)
names(graph_countries)[grep("matrix.",names(graph_countries))] <- "IndexedTimeline"
view(graph_countries)
plt <- graph_countries %>% ggplot(aes(x = IndexedTimeline, y = Confirmed, fill = Country)) +
geom_line()
plt
plt <- graph_countries %>% ggplot(aes(x = IndexedTimeline, y = Confirmed, colour = Country)) +
geom_line()
plt
library(shiny); runApp('C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Assignments/Assignment 4/COVID-Tracker/app_v3.R')
# Shiny App that displays average house prices the change in house prices on a map of Cape Town
# The data was scraped using Python, saved as a .csv and then imported into R
# Import the necessary libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(sf)
library(leaflet)
library(sp)
library("RColorBrewer")
# The data has been processed by another script; load it in here
load(file = "mapAppData.Rdata")
combinded_data <- st_as_sf(combined_data)
write.csv(combined_data$Suburbs, "suburbslist.csv")
getwd()
# The data has been processed by another script; load it in here
setwd("C:/Users/User/Documents/Python Scripts/Maps - Final")
load(file = "mapAppData.Rdata")
combinded_data <- st_as_sf(combined_data)
write.csv(combined_data$Suburbs, "suburbslist.csv")
view(combined_data$Suburbs)
view(combined_data$Suburb)
write.csv(combined_data$Suburb, "suburbslist.csv")
runApp()
runApp()
write_data <- combined_data %>% st_centroid()
cents <- st_coordinates(write_data$geometry)
head(cents)
combinded_data <- st_as_sf(combined_data)
write_data <- combined_data %>% st_centroid()
cents <- st_coordinates(write_data$geometry)
write_data <- cbind(write_data %>% select(c(Suburbs, X, Y), cents))
write.csv(write_data,  "suburbslist2.csv")
write_data <- cbind(write_data %>% select(c(Suburb, X, Y), cents))
load(file = "mapAppData.Rdata")
combinded_data <- st_as_sf(combined_data)
write_data <- combined_data %>% st_centroid()
cents <- st_coordinates(write_data$geometry)
write_data <- cbind(write_data %>% select(c(Suburb), cents))
write.csv(write_data,  "suburbslist2.csv")
write_data <- cbind(write_data %>% select(c(Suburb), data.frame(cents)))
cents
load(file = "mapAppData.Rdata")
combinded_data <- st_as_sf(combined_data)
write_data <- combined_data %>% st_centroid()
cents <- st_coordinates(write_data$geometry)
write_data <- cbind(write_data %>% select(c(Suburb), data.frame(cents)))
write.csv(write_data,  "suburbslist2.csv")
write_data <- data.frame(write_data %>% select(c(Suburb), data.frame(cents)))
write_data <- cbined(write_data, cents)
write_data <- cbind(write_data, cents)
write_data <- write_data %>% select(c(Suburb, X, Y))
write.csv(write_data,  "suburbslist2.csv")
runApp()
runApp()
runApp()
runApp()
getwd()
library(rsconnect)
deployApp()
deployApp()
