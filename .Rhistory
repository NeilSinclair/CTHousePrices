shiny::runApp()
runApp()
runApp()
runApp()
data_longer %>% filter(Suburb == "Rosebank") %>%
ggplot(aes(x = Year, y = HousePrice)) + geom_line()
data <- read.csv("C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Maps/property_prices.csv")
data <- data %>% rename(Suburb = X)
data$Suburb <- as.character(data$Suburb)
# years <- c("X2017", "X2018", "X2019")
# years <- c(sprintf("X20%d", seq(11,19, by=1)))
# burbs <- c("Kenilworth", "Newlands")
data_longer <- pivot_longer(data, cols = c("X2011", "X2012", "X2013", "X2014", "X2015", "X2016",
"X2017", "X2018", "X2019", "X2020"), names_to = "Year",
values_to = "HousePrice")
data_longer$Year <- gsub("^X", "", data_longer$Year)
data_longer$Year <- as.integer(data_longer$Year)
head(data_longer)
#data_longer %>% filter(Year == "2011")
data_longer %>% filter(Suburb == "Rosebank") %>%
ggplot(aes(x = Year, y = HousePrice)) + geom_line()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- read.csv("C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Maps/property_prices.csv")
data <- data %>% rename(Suburb = X)
data$Suburb <- as.character(data$Suburb)
# years <- c("X2017", "X2018", "X2019")
# years <- c(sprintf("X20%d", seq(11,19, by=1)))
# burbs <- c("Kenilworth", "Newlands")
data_longer <- pivot_longer(data, cols = c("X2011", "X2012", "X2013", "X2014", "X2015", "X2016",
"X2017", "X2018", "X2019", "X2020"), names_to = "Year",
values_to = "HousePrice")
data_longer$Year <- gsub("^X", "", data_longer$Year)
data_longer$Year <- as.integer(data_longer$Year)
head(data_longer %>% filter(Suburb == "Belhar"))
data <- read.csv("C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Maps/property_prices.csv")
data <- data %>% rename(Suburb = X)
data$Suburb <- as.character(data$Suburb)
# years <- c("X2017", "X2018", "X2019")
# years <- c(sprintf("X20%d", seq(11,19, by=1)))
# burbs <- c("Kenilworth", "Newlands")
data_longer <- pivot_longer(data, cols = c("X2011", "X2012", "X2013", "X2014", "X2015", "X2016",
"X2017", "X2018", "X2019", "X2020"), names_to = "Year",
values_to = "HousePrice")
data_longer$Year <- gsub("^X", "", data_longer$Year)
data_longer$Year <- as.Date(data_longer$Year)
head(data_longer %>% filter(Suburb == "Belhar"))
install.packages(c("dygraphs", "feasts"))
runApp()
data <- read.csv("C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Maps/property_prices.csv")
data <- data %>% rename(Suburb = X)
data$Suburb <- as.character(data$Suburb)
# years <- c("X2017", "X2018", "X2019")
# years <- c(sprintf("X20%d", seq(11,19, by=1)))
# burbs <- c("Kenilworth", "Newlands")
data_longer <- pivot_longer(data, cols = c("X2011", "X2012", "X2013", "X2014", "X2015", "X2016",
"X2017", "X2018", "X2019", "X2020"), names_to = "Year",
values_to = "HousePrice")
data_longer$Year <- gsub("^X", "", data_longer$Year)
data_longer$Year <- as.Date(as.character(data_longer$Year))
head(data_longer %>% filter(Suburb == "Belhar"))
data <- read.csv("C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Maps/property_prices.csv")
data <- data %>% rename(Suburb = X)
data$Suburb <- as.character(data$Suburb)
# years <- c("X2017", "X2018", "X2019")
# years <- c(sprintf("X20%d", seq(11,19, by=1)))
# burbs <- c("Kenilworth", "Newlands")
data_longer <- pivot_longer(data, cols = c("X2011", "X2012", "X2013", "X2014", "X2015", "X2016",
"X2017", "X2018", "X2019", "X2020"), names_to = "Year",
values_to = "HousePrice")
data_longer$Year <- gsub("^X", "", data_longer$Year)
data_longer$Year <- as.Date(as.character(data_longer$Year))
head(data_longer %>% filter(Suburb == "Belhar"))
runApp()
priceStart <- drop(data_longer %>% filter(Suburb == "Belhar", Year == 2011) %>%
select(HousePrice))
priceEnd <- drop(data_longer %>% filter(Suburb == "Belhar", Year == 2015) %>%
select(HousePrice))
priceStart; priceEnd
priceStart/ priceEnd
log(priceStart/ priceEnd)
log(priceEnd/ priceStart)
blah <- data_longer %>% filter(Suburb == "Belhar") %>% mutate(returns = log(priceEnd/priceStart))
blah <- data_longer %>% filter(Suburb == "Belhar") %>% mutate(returns = 5)
data <- read.csv("C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Maps/property_prices.csv")
data <- data %>% rename(Suburb = X)
data$Suburb <- as.character(data$Suburb)
# years <- c("X2017", "X2018", "X2019")
# years <- c(sprintf("X20%d", seq(11,19, by=1)))
# burbs <- c("Kenilworth", "Newlands")
data_longer <- pivot_longer(data, cols = c("X2011", "X2012", "X2013", "X2014", "X2015", "X2016",
"X2017", "X2018", "X2019", "X2020"), names_to = "Year",
values_to = "HousePrice")
data_longer$Year <- gsub("^X", "", data_longer$Year)
data_longer$Year <- as.integer(as.character(data_longer$Year))
#head(data_longer %>% filter(Suburb == "Belhar"))
priceStart <- drop(data_longer %>% filter(Suburb == "Belhar", Year == 2011) %>%
select(HousePrice))
priceEnd <- drop(data_longer %>% filter(Suburb == "Belhar", Year == 2015) %>%
select(HousePrice))
growth = log(priceEnd/ priceStart)
blah <- data_longer %>% filter(Suburb == "Belhar") %>% mutate(returns = growth)
growth = drop(log(priceEnd/ priceStart))
blah <- data_longer %>% filter(Suburb == "Belhar") %>% mutate(returns = growth)
growth = drop(log(priceEnd/ priceStart))
growth
blah <- data_longer %>% filter(Suburb == "Belhar") %>% mutate(returns = growth[[1]])
runApp()
priceStart <- drop(data_longer %>% filter(Suburb == "Belhar", Year == 2011) %>%
select(HousePrice))
priceEnd <- drop(data_longer %>% filter(Suburb == "Belhar", Year == 2015) %>%
select(HousePrice))
growth = drop(log(priceEnd/ priceStart))
growth
blah <- data_longer %>% filter(Suburb == "Belhar") %>% mutate(returns = growth[[1]])
blah
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny); runApp('map_app_v5.R')
runApp('map_app_v5.R')
# Import the necessary libraries
library(shiny)
library(ggplot2)
library(Rcpp)
library(tidyverse)
library(sf)
library(leaflet)
library(sp)
library("RColorBrewer")
library(DT)
library(data.table)
# Read in the house price data as scraped from the internet
data1 <- read.csv("C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Maps/property_prices.csv")
data2 <- read.csv("C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Maps/property_prices_2.csv")
data3 <- read.csv("C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Maps/property_prices_3.csv")
data <- full_join(data1, data2)
data <- full_join(data, data3)
data <- na.omit(data)
#dim(data)
data <- data %>% rename(Suburb = X)
data$Suburb <- toupper(as.character(data$Suburb))
# Read in the suburbs data and convert to CRS 4326
ct_suburbs <- st_read("C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Maps/data/Official_Suburbs.shp")
ct_suburbs <- ct_suburbs %>% rename(Suburb = OFC_SBRB_N)
ct_suburbs <- ct_suburbs %>% st_transform(crs = 4326)
ct_suburbs$Suburb <- as.character(ct_suburbs$Suburb)
# Cycle through the columns and create a new column to calculate the investment return for each of the
# time periods in the data (e.g. year 1 to 3; year 9 to 10; year 3 to 10...)
# Note: we start with col[2] and end with col[11] because there are 10 years, but the first column in the
# dataset is the suburbs column, so we start with column 2 which is X2011, the prices for 2011
data_temp <- data
for (i in 2:10){
for (j in (i+1):11){
# Calculate the annual mean compounding growth rate
new_col <- exp(log(data[,j]/data[,i]))^(1/(j-i))-1
data_temp <- cbind(data_temp, new_col)
# Create a column that stores the values as discrete categories as this makes the map
# and legend look better; keep the continuous values for pop-up displays
data_temp <- data_temp %>% mutate(new_cat = ifelse(new_col < -1, "NA",
ifelse(new_col < (-0.25), "< -25%", ifelse(new_col < (-0.1), "-25% to -10%",
ifelse(new_col < 0, "-10% to 0%", ifelse(new_col < 0.1, "0% to 10%",
ifelse(new_col < 0.25, "10% to 25%", "> 25%")))))))
# Replace the name of the temp columns with year-specific names; C -> continuous; D -> discrete
names(data_temp)[grep("new_col", names(data_temp))] <- paste0("CX20",9+i,".20",9+j)
names(data_temp)[grep("new_cat", names(data_temp))] <- paste0("DX20",9+i,".20",9+j)
}
}
# Small suburb fix-ups for a few non-matching suburbs
ct_suburbs[74, "Suburb"] = "CAMPS BAY"
ct_suburbs[704, "Suburb"] = "CAMPS BAY"
ct_suburbs[423, "Suburb"] = "SIMONS TOWN"
ct_suburbs[27, "Suburb"] = "BO KAAP"
ct_suburbs[765, "Suburb"] = "ZONNEBLOEM"
# Remove duplicate entries in the price data
data_temp <- unique(data_temp)
# Commented out code for looking for the suburbs missing in the map
#view(ct_suburbs$Suburb, title = "CTBURBS")
#view(data_temp$Suburb, "DATA")
# Join the CoC CT suburbs data with the price data and remove rows where there isn't matching data
# between the two data sources
combined_data <- st_as_sf(na.omit(inner_join( ct_suburbs, data_temp, by="Suburb")))
# Create the Shiny App UI
ui <- fluidPage(
# Application title
titlePanel("Cape Town suburb price data"),
sidebarLayout(
sidebarPanel(
# Explaination of what to do
helpText("To view data for specific suburbs, select the 'Selected suburbs'
radio buttom and then type the suburb name in the Suburb box. Press 'backspace' to remove a
suburb. To view price changes over time, uses the slider below to select different time frames."),
# Radio buttons for selection All suburbs or just specific suburbs to display on the map
radioButtons("radio", label = h3("Display options"),
choices = list("All suburbs" = 1, "Selected suburb(s)" = 2)),
# Drop down suburb-selection menu
selectInput("suburb", label = "Suburb", choices = combined_data$Suburb, selected = "ROSEBANK",
multiple = TRUE),
radioButtons("priceRadio", label = h3("Display average or % change in price over time"),
choices = list("% price change" = 1, "Average price" = 2)),
# Slider to choose which years to see price change info for
sliderInput("range", label = h3("Time period"), min = 2011,
max = 2020, value = c(2019,2020), sep = "")
),
mainPanel(
helpText("This map visualises the compounded annual changes in house prices over time in
the City of Cape Town. Click on suburbs on the map to see the latest price info
and the suburb name."),
leafletOutput("suburbsMap")
)
)
)
x11 <- 2018; x22 <-2020
filtered_data <- combined_data %>%
mutate(AvgPrice = (filtered_data %>%
select(!!as.symbol(paste0("X",x11))) / filtered_data %>% select(!!as.symbol(paste0("X",x22)))))
filtered_data <- combined_data %>%
mutate(AvgPrice = (combined_data %>%
select(!!as.symbol(paste0("X",x11))) / filtered_data %>% select(!!as.symbol(paste0("X",x22)))))
filtered_data <- combined_data %>%
mutate(AvgPrice = (combined_data %>%
select(!!as.symbol(paste0("X",x11))) / combined_data %>% select(!!as.symbol(paste0("X",x22)))))
filtered_data <- combined_data %>%
mutate(AvgPrice = (combined_data %>%
select(2018) / combined_data %>% select(2020)))
filtered_data <- combined_data %>%
mutate(AvgPrice = (combined_data %>%
select(!!as.symbol(paste0("X2018"))) / combined_data %>% select(!!as.symbol(paste0("X2020")))))
filtered_data <- combined_data %>%
mutate(AvgPrice = (combined_data %>%
select("X2018") / combined_data %>% select("X2020")))
filtered_data <- combined_data %>%
mutate(AvgPrice = as.matrix((combined_data %>%
select("X2018") / combined_data %>% select("X2020"))))
runApp('map_app_v5.R')
runApp('map_app_v5.R')
runApp('map_app_v5.R')
data_temp <- data
for (i in 2:10){
for (j in (i+1):11){
# Calculate the annual mean compounding growth rate
new_col <- exp(log(data[,j]/data[,i]))^(1/(j-i))-1
data_temp <- cbind(data_temp, new_col)
# Create a column that stores the values as discrete categories as this makes the map
# and legend look better; keep the continuous values for pop-up displays
data_temp <- data_temp %>% mutate(new_cat = ifelse(new_col < -1, "NA",
ifelse(new_col < (-0.25), "< -25%", ifelse(new_col < (-0.1), "-25% to -10%",
ifelse(new_col < 0, "-10% to 0%", ifelse(new_col < 0.1, "0% to 10%",
ifelse(new_col < 0.25, "10% to 25%", "> 25%")))))))
# Replace the name of the temp columns with year-specific names; C -> continuous; D -> discrete
names(data_temp)[grep("new_col", names(data_temp))] <- paste0("CX20",9+i,".20",9+j)
names(data_temp)[grep("new_cat", names(data_temp))] <- paste0("DX20",9+i,".20",9+j)
# Calculate an average price column for the average price between years i and j
avg_price_col <- (data[,j]+data[i,])/(2)
}
}
for (i in 2:10){
for (j in (i+1):11){
# Calculate the annual mean compounding growth rate
new_col <- exp(log(data[,j]/data[,i]))^(1/(j-i))-1
data_temp <- cbind(data_temp, new_col)
# Create a column that stores the values as discrete categories as this makes the map
# and legend look better; keep the continuous values for pop-up displays
data_temp <- data_temp %>% mutate(new_cat = ifelse(new_col < -1, "NA",
ifelse(new_col < (-0.25), "< -25%", ifelse(new_col < (-0.1), "-25% to -10%",
ifelse(new_col < 0, "-10% to 0%", ifelse(new_col < 0.1, "0% to 10%",
ifelse(new_col < 0.25, "10% to 25%", "> 25%")))))))
# Replace the name of the temp columns with year-specific names; C -> continuous; D -> discrete
names(data_temp)[grep("new_col", names(data_temp))] <- paste0("CX20",9+i,".20",9+j)
names(data_temp)[grep("new_cat", names(data_temp))] <- paste0("DX20",9+i,".20",9+j)
# Calculate an average price column for the average price between years i and j
avg_price_col <- (data[,j]+data[i,])
}
}
data_temp <- data
for (i in 2:10){
for (j in (i+1):11){
# Calculate the annual mean compounding growth rate
new_col <- exp(log(data[,j]/data[,i]))^(1/(j-i))-1
data_temp <- cbind(data_temp, new_col)
# Create a column that stores the values as discrete categories as this makes the map
# and legend look better; keep the continuous values for pop-up displays
data_temp <- data_temp %>% mutate(new_cat = ifelse(new_col < -1, "NA",
ifelse(new_col < (-0.25), "< -25%", ifelse(new_col < (-0.1), "-25% to -10%",
ifelse(new_col < 0, "-10% to 0%", ifelse(new_col < 0.1, "0% to 10%",
ifelse(new_col < 0.25, "10% to 25%", "> 25%")))))))
# Replace the name of the temp columns with year-specific names; C -> continuous; D -> discrete
names(data_temp)[grep("new_col", names(data_temp))] <- paste0("CX20",9+i,".20",9+j)
names(data_temp)[grep("new_cat", names(data_temp))] <- paste0("DX20",9+i,".20",9+j)
# Calculate an average price column for the average price between years i and j
avg_price_col <- (data[,j]+data[,i])/2
data_temp <- cbind(data_temp, avg_price_col)
names(data_temp)[grep("avg_price_col", names(data_temp))] <- paste0("AvgX20",9+i,".20",9+j)
}
}
runApp('map_app_v5.R')
runApp('map_app_v5.R')
