# For a small number of iterations, the parameters are close, but as the number of
# iterations increases, the values for sigma diverge for the two methods
parz; lm.ll
parz <- matrix(c(1,1,0.5,1), nrow=4)
for (i in 1:5){
parz <- y_loss(loglikelihood, parz)
}
# Compare the parameters achieved from the optim() and from using first principles
# For a small number of iterations, the parameters are close, but as the number of
# iterations increases, the values for sigma diverge for the two methods
parz; lm.ll
knitr::opts_chunk$set(echo = TRUE)
ll.func <- function(params, y, t){
#  Vars: n, sigma, K, N0, r, t
n <- length(y)
N0 <- 2         # This is set by the problem given
sigma <- 1
K <- params[2]
r <- params[3]
# There is a negative before the likelihood expression because the Newton-Raphson
# Method will try to find the minimum and we want to maximize this function
z <- -(-(n/2)*log(2*pi) - (n/2)*log(sigma^2) -
(1/(2*sigma^2))*sum((y-log(K*N0)+log(2 + (K-2)*exp(-r*t))))^2)
}
# Test that derivative matrixes work --- commented out
#hessian(func = ll.func, x = c(5,5,5), y = beetlesY, t = daysX)
#jacobian(func = ll.func, x = c(5,5,5), y = beetlesY, t = daysX)
# Function using NR method to update the parameters of the model using likelihood estimation
y_loss <- function(loglikfunc, params){
params <- params -
solve(hessian(func = loglikfunc, x = params, y = beetlesY, t = daysX)) %*%
t(jacobian(func = loglikfunc, x = params, y = beetlesY, t = daysX))
}
# Iterate using NR methods; parameters set close to nlm() derived parameters for testing
params <- c(1, 900, 1)
for (i in 1:3){
params <- y_loss(ll.func, params)
}
library(numDeriv)
daysX <- matrix(c(0,8,28,41,63,79,97,117,135, 154), nrow = 10)
beetlesY <- matrix(c(2,47,192,256,768,896,1120,896,1184,1024), nrow = 10)
SSE_logistic <- function(params, x, y){
# The logistic population function to be optimised by non-linear optimisation
K <- params[1]
r <- params[2]
Nt <- (K*2) / (2 + (K-2)*exp(-r*x))
SSE <- sum((y - Nt)^2)
return(SSE)
}
# Test to see that the SSE_logistic function works: commented out
#SSE_logistic(params, daysX, beetlesY)
params <- matrix(c(1,1), nrow=2)
# Build the prediction with the non-linear optimiser
log_model <- nlm(f = SSE_logistic, p = params, x = daysX, y = beetlesY)
log_model
# Plot the data and the predicted values
K <- log_model$estimate[1]; r <- log_model$estimate[2]
Nt_est <- (2*K) / (2 + (K-2)*exp(-r*seq(0,154, length=100)))
plot(beetlesY ~ daysX)
lines(seq(0,154,length=100), Nt_est)
## Function to workout the log likelihood
ll.func <- function(params, y, t){
#  Vars: n, sigma, K, N0, r, t
n <- length(y)
N0 <- 2         # This is set by the problem given
sigma <- 1
K <- params[2]
r <- params[3]
# There is a negative before the likelihood expression because the Newton-Raphson
# Method will try to find the minimum and we want to maximize this function
z <- -(-(n/2)*log(2*pi) - (n/2)*log(sigma^2) -
(1/(2*sigma^2))*sum((y-log(K*N0)+log(2 + (K-2)*exp(-r*t))))^2)
}
# Test that derivative matrixes work --- commented out
#hessian(func = ll.func, x = c(5,5,5), y = beetlesY, t = daysX)
#jacobian(func = ll.func, x = c(5,5,5), y = beetlesY, t = daysX)
# Function using NR method to update the parameters of the model using likelihood estimation
y_loss <- function(loglikfunc, params){
params <- params -
solve(hessian(func = loglikfunc, x = params, y = beetlesY, t = daysX)) %*%
t(jacobian(func = loglikfunc, x = params, y = beetlesY, t = daysX))
}
# Iterate using NR methods; parameters set close to nlm() derived parameters for testing
params <- c(1, 900, 1)
for (i in 1:3){
params <- y_loss(ll.func, params)
}
ll.func <- function(params, y, t){
#  Vars: n, sigma, K, N0, r, t
n <- length(y)
N0 <- 2         # This is set by the problem given
sigma <- 1
K <- params[1]
r <- params[2]
# There is a negative before the likelihood expression because the Newton-Raphson
# Method will try to find the minimum and we want to maximize this function
z <- -(-(n/2)*log(2*pi) - (n/2)*log(sigma^2) -
(1/(2*sigma^2))*sum((y-log(K*N0)+log(2 + (K-2)*exp(-r*t))))^2)
}
# Test that derivative matrixes work --- commented out
#hessian(func = ll.func, x = c(5,5,5), y = beetlesY, t = daysX)
#jacobian(func = ll.func, x = c(5,5,5), y = beetlesY, t = daysX)
# Function using NR method to update the parameters of the model using likelihood estimation
y_loss <- function(loglikfunc, params){
params <- params -
solve(hessian(func = loglikfunc, x = params, y = beetlesY, t = daysX)) %*%
t(jacobian(func = loglikfunc, x = params, y = beetlesY, t = daysX))
}
# Iterate using NR methods; parameters set close to nlm() derived parameters for testing
params <- c(1, 900, 1)
for (i in 1:3){
params <- y_loss(ll.func, params)
}
## Function to workout the log likelihood
ll.func <- function(params, y, t){
#  Vars: n, sigma, K, N0, r, t
n <- length(y)
N0 <- 2         # This is set by the problem given
sigma <- 1
K <- params[1]
r <- params[2]
# There is a negative before the likelihood expression because the Newton-Raphson
# Method will try to find the minimum and we want to maximize this function
z <- -(-(n/2)*log(2*pi) - (n/2)*log(sigma^2) -
(1/(2*sigma^2))*sum((y-log(K*N0)+log(2 + (K-2)*exp(-r*t))))^2)
}
# Test that derivative matrixes work --- commented out
#hessian(func = ll.func, x = c(5,5,5), y = beetlesY, t = daysX)
#jacobian(func = ll.func, x = c(5,5,5), y = beetlesY, t = daysX)
# Function using NR method to update the parameters of the model using likelihood estimation
y_loss <- function(loglikfunc, params, beetlesY, daysX){
params <- params -
solve(hessian(func = loglikfunc, x = params, y = beetlesY, t = daysX)) %*%
t(jacobian(func = loglikfunc, x = params, y = beetlesY, t = daysX))
}
# Iterate using NR methods; parameters set close to nlm() derived parameters for testing
params <- c(1, 900)
for (i in 1:3){
params <- y_loss(ll.func, params, beetlesY, daysX)
}
# Iterate using NR methods; parameters set close to nlm() derived parameters for testing
params <- c(1, 900)
params <- y_loss(ll.func, params, beetlesY, daysX)
hessian(func = ll.func, x = params, y = beetlesY, t = daysX)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Assignments")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/User/OneDrive/Documents/UCT/Courses/EDA/Assignments")
#install.packages("tidyverse")
library(tidyverse)
library(ggplot2)
data <- readRDS("sportsrisk.rds")
getwd()
data <- readRDS("sportrisk.rds")
data <- readRDS("sportrisks.rds")
view(data)
# Filter out people who didn't want to respond
data <- data %>% filter(Q1 == 0)
data
data <- readRDS("sportrisks.rds")
(Q1 == 1)
data <- readRDS("sportrisks.rds")
# Filter out people who didn't want to respond
data <- data %>% filter(Q1 == 1)
head(data)
data$extreme_risk
data$extreme_risk %>% filter(!=FALSE)
data %>% filter(extreme_risk !=FALSE)
data %>% rename(consent = Q1)
data %>% filter(extreme_risk !=FALSE)
data <- data %>% rename(consent = Q1)
data %>% filter(extreme_risk !=FALSE)
data <- readRDS("sportrisks.rds")
# Filter out people who didn't want to respond
colnames(data)
?rename
# Filter out people who didn't want to respond
colnames(data)
data <- data %>% rename(c("consent", "gender", "level_of_danger", "danger_conf"),
c("Q1","Q3", "Q5", "Q5_1"))
?names
?name
# Filter out people who didn't want to respond
colnames(data)
!is.na(data$Q5_1_a)
data$Q5_1_a
!is.na(data$Q5_a_1)
data <- readRDS("sportrisks.rds")
data <- data %>% filter(Q1 == 1)
# Remove the NA separating columns
data <- data %>% select(-c(Q5, Q5_a, Q6, Q6_a))
data <- data %>% rename(consent = Q1, gender = Q2, lvl_danger = Q5_1, danger_conf = Q5_a_1,
degree_recklessness = Q6_1, recklessness_conf = Q6_a_1,
pay_insurance = Q7, insurance_amount = Q7_a,
play_golf = Q8_1, play_skitouring = Q8_2, play_rock_climbing = Q8_3,
play_big_Wave_surfing = Q8_4, play_hill_walking = Q8_5,
play_running = Q8_6, play_NA = Q8_7)
data <- data %>% rename(consent = Q1, gender = Q3, lvl_danger = Q5_1, danger_conf = Q5_a_1,
degree_recklessness = Q6_1, recklessness_conf = Q6_a_1,
pay_insurance = Q7, insurance_amount = Q7_a,
play_golf = Q8_1, play_skitouring = Q8_2, play_rock_climbing = Q8_3,
play_big_Wave_surfing = Q8_4, play_hill_walking = Q8_5,
play_running = Q8_6, play_NA = Q8_7)
colnames(data)
view(data)
ggplot(data, aes(y = pay_insurance)) + geom_hist()
#install.packages("tidyverse")
library(tidyverse)
library(ggplot2)
ggplot(data, aes(y = pay_insurance)) + geom_hist()
ggplot(data, aes(y = pay_insurance)) + geom_histogram()
colnames(data)
ggplot(data, aes(x = pay_insurance)) + geom_histogram()
?geom_histogram
ggplot(data, aes(pay_insurance)) + geom_histogram()
data <- readRDS("sportrisks.rds")
# Filter out people who didn't want to respond
data <- data %>% filter(Q1 == 1)
# Remove the NA separating columns
data <- data %>% select(-c(Q5, Q5_a, Q6, Q6_a))
# Make the data easier to read by renaming the columns
data <- data %>% rename(consent = Q1, participant_gender = Q3, lvl_danger = Q5_1,
danger_conf = Q5_a_1,
degree_recklessness = Q6_1, recklessness_conf = Q6_a_1,
pay_insurance = Q7, insurance_amount = Q7_a,
play_golf = Q8_1, play_skitouring = Q8_2, play_rock_climbing = Q8_3,
play_big_Wave_surfing = Q8_4, play_hill_walking = Q8_5,
play_running = Q8_6, play_NA = Q8_7)
# Check updated column names and view the updated data -- commented out
#colnames(data)
#view(data)
#data %>% filter(extreme_risk !=FALSE)
# Check updated column names and view the updated data -- commented out
#colnames(data)
view(data)
ggplot(data, aes(pay_insurance)) + geom_histogram()
a <- data %>% filter(pay_insurance == 3) %>% select(c(pay_insurance, insurance_amount))
a
# Set "pay_insurance" as a factor variable
data$pay_insurance <- as.factor(data$pay_insurance)
view(data)
str(data)
data <- readRDS("sportrisks.rds")
# Filter out people who didn't want to respond
data <- data %>% filter(Q1 == 1)
# Remove the NA separating columns
data <- data %>% select(-c(Q5, Q5_a, Q6, Q6_a))
# Make the data easier to read by renaming the columns
data <- data %>% rename(consent = Q1, participant_gender = Q3, lvl_danger = Q5_1,
danger_conf = Q5_a_1,
degree_recklessness = Q6_1, recklessness_conf = Q6_a_1,
pay_insurance = Q7, insurance_amount = Q7_a,
play_golf = Q8_1, play_skitouring = Q8_2, play_rock_climbing = Q8_3,
play_big_Wave_surfing = Q8_4, play_hill_walking = Q8_5,
play_running = Q8_6, play_NA = Q8_7)
# Check updated column names and view the updated data -- commented out
#colnames(data)
#data %>% filter(extreme_risk !=FALSE)
# Set "pay_insurance", "participant_gender", "gender" and "sport" as a factor variables
data$pay_insurance <- as.factor(data$pay_insurance)
data$participant_gender <- as.factor(data$participant_gender)
data$gender <- as.factor(data$gender)
data$sport <- as.factor(data$sport)
view(data)
a <- data %>% filter(pay_insurance == 1) %>% select(c(pay_insurance, insurance_amount))
a
a <- data %>% filter(pay_insurance == 2) %>% select(c(pay_insurance, insurance_amount))
a
a$pay_insurance[pay_insurance == 2] <- FALSE
a$pay_insurance[a$pay_insurance == 2] <- FALSE
a
a <- data %>% filter(pay_insurance == 2) %>% select(c(pay_insurance, insurance_amount))
a$pay_insurance[a$pay_insurance == 2] <- "NO"
a
a <- data %>% select(c(pay_insurance, insurance_amount))
#a$pay_insurance[a$pay_insurance == 2] <- "NO"
a
a$pay_insurance[a$pay_insurance == 2] <- "NO"
a
a$pay_insurance[a$pay_insurance == 2] = "NO"
a
a <- data %>% select(c(pay_insurance, insurance_amount))
#a$pay_insurance[a$pay_insurance == 2] = "NO"
a %>% mutate(pay_insurance ifelse(pay_insurance == 1, "YES",
#a$pay_insurance[a$pay_insurance == 2] = "NO"
a %>% mutate(pay_insurance = ifelse(pay_insurance == 1, "YES",
a
a
#a$pay_insurance[a$pay_insurance == 2] = "NO"
a %>% mutate(pay_insurance = ifelse(pay_insurance == 1, "YES",
ifelse(pay_insurance == 2, "No", "Unsure")))
a
a <- data %>% select(c(pay_insurance, insurance_amount))
#a$pay_insurance[a$pay_insurance == 2] = "NO"
a %>% mutate(pay_insurance = ifelse(pay_insurance == 1, "YES",
ifelse(pay_insurance == 2, "No", "Unsure")))
a
#a$pay_insurance[a$pay_insurance == 2] = "NO"
a <-  %>% mutate(pay_insurance = ifelse(pay_insurance == 1, "YES",
a <- data %>% select(c(pay_insurance, insurance_amount))
#a$pay_insurance[a$pay_insurance == 2] = "NO"
a <-  a %>% mutate(pay_insurance = ifelse(pay_insurance == 1, "YES",
ifelse(pay_insurance == 2, "No", "Unsure")))
a
data$pay_insurance <-  data$pay_insurance %>%
mutate(pay_insurance = ifelse(pay_insurance == 1, "Yes",
ifelse(pay_insurance == 2, "No", "Unsure")))
data <- readRDS("sportrisks.rds")
# Filter out people who didn't want to respond
data <- data %>% filter(Q1 == 1)
# Remove the NA separating columns
data <- data %>% select(-c(Q5, Q5_a, Q6, Q6_a))
# Make the data easier to read by renaming the columns
data <- data %>% rename(consent = Q1, participant_gender = Q3, lvl_danger = Q5_1,
danger_conf = Q5_a_1,
degree_recklessness = Q6_1, recklessness_conf = Q6_a_1,
pay_insurance = Q7, insurance_amount = Q7_a,
play_golf = Q8_1, play_skitouring = Q8_2, play_rock_climbing = Q8_3,
play_big_Wave_surfing = Q8_4, play_hill_walking = Q8_5,
play_running = Q8_6, play_NA = Q8_7)
data$pay_insurance <- data$pay_insurance %>%
mutate(pay_insurance = ifelse(pay_insurance == 1, "Yes",
ifelse(pay_insurance == 2, "No", "Unsure")))
data <- readRDS("sportrisks.rds")
# Filter out people who didn't want to respond
data <- data %>% filter(Q1 == 1)
# Remove the NA separating columns
data <- data %>% select(-c(Q5, Q5_a, Q6, Q6_a))
# Make the data easier to read by renaming the columns
data <- data %>% rename(consent = Q1, participant_gender = Q3, lvl_danger = Q5_1,
danger_conf = Q5_a_1,
degree_recklessness = Q6_1, recklessness_conf = Q6_a_1,
pay_insurance = Q7, insurance_amount = Q7_a,
play_golf = Q8_1, play_skitouring = Q8_2, play_rock_climbing = Q8_3,
play_big_Wave_surfing = Q8_4, play_hill_walking = Q8_5,
play_running = Q8_6, play_NA = Q8_7)
# Set "pay_insurance", "participant_gender", "gender" and "sport" as a factor variables
data$pay_insurance <- as.factor(data$pay_insurance)
data$participant_gender <- as.factor(data$participant_gender)
data$gender <- as.factor(data$gender)
data$sport <- as.factor(data$sport)
data$pay_insurance <- data$pay_insurance %>%
mutate(pay_insurance = ifelse(pay_insurance == 1, "Yes",
ifelse(pay_insurance == 2, "No", "Unsure")))
data <- readRDS("sportrisks.rds")
# Filter out people who didn't want to respond
data <- data %>% filter(Q1 == 1)
# Remove the NA separating columns
data <- data %>% select(-c(Q5, Q5_a, Q6, Q6_a))
# Make the data easier to read by renaming the columns
data <- data %>% rename(consent = Q1, participant_gender = Q3, lvl_danger = Q5_1,
danger_conf = Q5_a_1,
degree_recklessness = Q6_1, recklessness_conf = Q6_a_1,
pay_insurance = Q7, insurance_amount = Q7_a,
play_golf = Q8_1, play_skitouring = Q8_2, play_rock_climbing = Q8_3,
play_big_Wave_surfing = Q8_4, play_hill_walking = Q8_5,
play_running = Q8_6, play_NA = Q8_7)
# Set "pay_insurance", "participant_gender", "gender" and "sport" as a factor variables
data$pay_insurance <- as.character(data$pay_insurance)
data$participant_gender <- as.factor(data$participant_gender)
data$gender <- as.factor(data$gender)
data$sport <- as.factor(data$sport)
data$pay_insurance <- data$pay_insurance %>%
mutate(pay_insurance = ifelse(pay_insurance == 1, "Yes",
ifelse(pay_insurance == 2, "No", "Unsure")))
data <- readRDS("sportrisks.rds")
# Filter out people who didn't want to respond
data <- data %>% filter(Q1 == 1)
# Remove the NA separating columns
data <- data %>% select(-c(Q5, Q5_a, Q6, Q6_a))
# Make the data easier to read by renaming the columns
data <- data %>% rename(consent = Q1, participant_gender = Q3, lvl_danger = Q5_1,
danger_conf = Q5_a_1,
degree_recklessness = Q6_1, recklessness_conf = Q6_a_1,
pay_insurance = Q7, insurance_amount = Q7_a,
play_golf = Q8_1, play_skitouring = Q8_2, play_rock_climbing = Q8_3,
play_big_Wave_surfing = Q8_4, play_hill_walking = Q8_5,
play_running = Q8_6, play_NA = Q8_7)
# Set "pay_insurance", "participant_gender", "gender" and "sport" as a factor variables
data$pay_insurance <- as.character(data$pay_insurance)
data$participant_gender <- as.factor(data$participant_gender)
data$gender <- as.factor(data$gender)
data$sport <- as.factor(data$sport)
data$pay_insurance <- data$pay_insurance %>%
mutate(pay_insurance2 = ifelse(pay_insurance == 1, "Yes",
ifelse(pay_insurance == 2, "No", "Unsure")))
data <- readRDS("sportrisks.rds")
# Filter out people who didn't want to respond
data <- data %>% filter(Q1 == 1)
# Remove the NA separating columns
data <- data %>% select(-c(Q5, Q5_a, Q6, Q6_a))
# Make the data easier to read by renaming the columns
data <- data %>% rename(consent = Q1, participant_gender = Q3, lvl_danger = Q5_1,
danger_conf = Q5_a_1,
degree_recklessness = Q6_1, recklessness_conf = Q6_a_1,
pay_insurance = Q7, insurance_amount = Q7_a,
play_golf = Q8_1, play_skitouring = Q8_2, play_rock_climbing = Q8_3,
play_big_Wave_surfing = Q8_4, play_hill_walking = Q8_5,
play_running = Q8_6, play_NA = Q8_7)
# Set "pay_insurance", "participant_gender", "gender" and "sport" as a factor variables
data$pay_insurance <- as.character(data$pay_insurance)
data$participant_gender <- as.factor(data$participant_gender)
data$gender <- as.factor(data$gender)
data$sport <- as.factor(data$sport)
data$pay_insurance <- data %>%
mutate(pay_insurance2 = ifelse(pay_insurance == 1, "Yes",
ifelse(pay_insurance == 2, "No", "Unsure")))
view(data)
data <- readRDS("sportrisks.rds")
# Filter out people who didn't want to respond
data <- data %>% filter(Q1 == 1)
# Remove the NA separating columns
data <- data %>% select(-c(Q5, Q5_a, Q6, Q6_a))
# Make the data easier to read by renaming the columns
data <- data %>% rename(consent = Q1, participant_gender = Q3, lvl_danger = Q5_1,
danger_conf = Q5_a_1,
degree_recklessness = Q6_1, recklessness_conf = Q6_a_1,
pay_insurance = Q7, insurance_amount = Q7_a,
play_golf = Q8_1, play_skitouring = Q8_2, play_rock_climbing = Q8_3,
play_big_Wave_surfing = Q8_4, play_hill_walking = Q8_5,
play_running = Q8_6, play_NA = Q8_7)
# Set "pay_insurance", "participant_gender", "gender" and "sport" as a factor variables
data$pay_insurance <- as.factor(data$pay_insurance)
data$participant_gender <- as.factor(data$participant_gender)
data$gender <- as.factor(data$gender)
data$sport <- as.factor(data$sport)
data$pay_insurance <- data %>%
mutate(pay_insurance2 = ifelse(pay_insurance == 1, "Yes",
ifelse(pay_insurance == 2, "No", "Unsure")))
view(data)
ggplot(data, aes(insurance_amount) + geom_histogram() + factor_wrap(~pay_insurance)
ggplot(data, aes(insurance_amount) + geom_histogram() + factor_wrap(~pay_insurance)
ggplot(data, aes(insurance_amount)) + geom_histogram() + factor_wrap(~pay_insurance)
ggplot(data, aes(insurance_amount)) + geom_histogram() + facet_wrap(~pay_insurance)
ggplot(select(data$pay_insurance == "Yes"), aes(insurance_amount)) + geom_histogram() + facet_wrap(~pay_insurance)
data %>% filter(pay_insurance == "Yes") %>% ggplot(aes(insurance_amount)) + geom_histogram()
data %>% filter(pay_insurance == "Yes")
data$pay_insurance
data <- readRDS("sportrisks.rds")
# Filter out people who didn't want to respond
data <- data %>% filter(Q1 == 1)
# Remove the NA separating columns
data <- data %>% select(-c(Q5, Q5_a, Q6, Q6_a))
# Make the data easier to read by renaming the columns
data <- data %>% rename(consent = Q1, participant_gender = Q3, lvl_danger = Q5_1,
danger_conf = Q5_a_1,
degree_recklessness = Q6_1, recklessness_conf = Q6_a_1,
pay_insurance = Q7, insurance_amount = Q7_a,
play_golf = Q8_1, play_skitouring = Q8_2, play_rock_climbing = Q8_3,
play_big_Wave_surfing = Q8_4, play_hill_walking = Q8_5,
play_running = Q8_6, play_NA = Q8_7)
# Set "pay_insurance", "participant_gender", "gender" and "sport" as a factor variables
data$pay_insurance <- as.factor(data$pay_insurance)
data$participant_gender <- as.factor(data$participant_gender)
data$gender <- as.factor(data$gender)
data$sport <- as.factor(data$sport)
# Update the values in pay_insurance; assumption here is that 3 means unsure
data$pay_insurance <- data %>%
mutate(pay_insurance = ifelse(pay_insurance == 1, "Yes",
ifelse(pay_insurance == 2, "No", "Unsure")))
view(data)
data %>% filter(pay_insurance == "Yes") %>% ggplot(aes(insurance_amount)) + geom_histogram()
data$pay_insurance
ggplot(data = filter(data, pay_insurance == "Yes"), aes(insurance_amount)) + geom_histogram()
data %>% filter(pay_insurance == "Yes")
tail(data$pay_insurance)
tail(data$pay_insurance == "Yes")
data <- readRDS("sportrisks.rds")
# Filter out people who didn't want to respond
data <- data %>% filter(Q1 == 1)
# Remove the NA separating columns
data <- data %>% select(-c(Q5, Q5_a, Q6, Q6_a))
# Make the data easier to read by renaming the columns
data <- data %>% rename(consent = Q1, participant_gender = Q3, lvl_danger = Q5_1,
danger_conf = Q5_a_1,
degree_recklessness = Q6_1, recklessness_conf = Q6_a_1,
pay_insurance = Q7, insurance_amount = Q7_a,
play_golf = Q8_1, play_skitouring = Q8_2, play_rock_climbing = Q8_3,
play_big_Wave_surfing = Q8_4, play_hill_walking = Q8_5,
play_running = Q8_6, play_NA = Q8_7)
# Set "pay_insurance", "participant_gender", "gender" and "sport" as a factor variables
data$pay_insurance <- as.factor(data$pay_insurance)
data$participant_gender <- as.factor(data$participant_gender)
data$gender <- as.factor(data$gender)
data$sport <- as.factor(data$sport)
# Update the values in pay_insurance; assumption here is that 3 means unsure
data <- data %>%
mutate(pay_insurance = ifelse(pay_insurance == 1, "Yes",
ifelse(pay_insurance == 2, "No", "Unsure")))
view(data)
data %>% filter(pay_insurance == "Yes") %>% ggplot(aes(insurance_amount)) +
geom_histogram()
data %>% filter(pay_insurance == "Yes") %>%
filter(insurance_amount< 25000) %>% ggplot(aes(insurance_amount)) +
geom_histogram()
data %>% filter(pay_insurance == "Yes") %>%
filter(insurance_amount< 20000) %>% ggplot(aes(insurance_amount)) +
geom_histogram()
data %>% filter(pay_insurance == "Yes") %>%
filter(insurance_amount< 2000) %>% ggplot(aes(insurance_amount)) +
geom_histogram()
data %>% filter(pay_insurance == "Yes") %>%
filter(insurance_amount< 1000) %>% ggplot(aes(insurance_amount)) +
geom_histogram()
# Note: pay_insurance (1) = YES, pay_insurance(2) = NO, pay_insurance(3) = ?
data %>% filter(pay_insurance == "Yes") %>% ggplot(aes(insurance_amount)) + geom_boxplot()
# Note: pay_insurance (1) = YES, pay_insurance(2) = NO, pay_insurance(3) = ?
data %>% filter(pay_insurance == "Yes") %>% ggplot(aes(y=insurance_amount)) +
geom_boxplot()
install.packages("nycflights13")
install.packages("remotes")
remotes::install_github("njtierney/brolgar")
